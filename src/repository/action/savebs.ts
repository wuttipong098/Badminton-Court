'use server';

import { getDbConnection } from '../db_connection';
import { Court } from '@/repository/entity/Court';

export interface BookingSettings {
  courtId: string | null;
  stadiumId: number;
  price: number;
  promoPrice?: number; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ
  timeRanges: { start: string; end: string }[];
  paymentTime: number;
}

export async function saveOrUpdateBookingSettings(data: BookingSettings) {
  console.log("üì¶ Received booking settings:", data);

  const courtIdNum = Number(data.courtId);
  const stadiumIdNum = Number(data.stadiumId);

  if (isNaN(courtIdNum) || isNaN(stadiumIdNum)) {
    throw new Error("courtId ‡∏´‡∏£‡∏∑‡∏≠ stadiumId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
  }

  if (!data.timeRanges || data.timeRanges.length === 0) {
    throw new Error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
  }

  return await getDbConnection(async (manager) => {
    // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á court ‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
    await manager.delete(Court, { courtId: courtIdNum });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    for (const range of data.timeRanges) {
      const court = new Court();
      court.courtId = courtIdNum;
      court.stadiumId = stadiumIdNum;
      court.price = data.price.toString();
      court.start_time = `${range.start} - ${range.end}`;
      court.paymentTime = data.paymentTime.toString();
      court.isBooked = false;
      court.active = true;

      await manager.save(Court, court);
    }

    return {
      success: true,
      message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß',
    };
  });
}
