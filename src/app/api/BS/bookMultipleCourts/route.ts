import { NextResponse } from "next/server";
import { getDbConnection } from "@/repository/db_connection";
import { bookings as BookingEntity } from "@/repository/entity/bookings";
import { Court } from "@/repository/entity/Court";
import { SlotTime } from "@/repository/entity/slot_time";
import { In } from "typeorm";

type Selection = {
  courtId: number; // court_id ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô slot_time
  slots: number[]; // Index ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô slot_time
};

export async function POST(req: Request) {
  let body: {
    userId?: number;
    bookingDate?: string;
    selections?: Selection[];
  };

  try {
    body = await req.json();
  } catch {
    return NextResponse.json(
      { success: false, message: "Payload ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON" },
      { status: 400 }
    );
  }

  const { userId, bookingDate, selections } = body;
  console.log("üì¶ Request body:", JSON.stringify(body, null, 2));

  if (
    typeof userId !== "number" ||
    typeof bookingDate !== "string" ||
    !Array.isArray(selections) ||
    selections.some(
      (s) =>
        typeof s.courtId !== "number" ||
        !Array.isArray(s.slots) ||
        s.slots.some((i) => typeof i !== "number" || i < 0)
    )
  ) {
    return NextResponse.json(
      { success: false, message: "Request payload ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
      { status: 400 }
    );
  }

  const date = new Date(bookingDate);
  if (isNaN(date.getTime())) {
    return NextResponse.json(
      { success: false, message: "Invalid bookingDate format" },
      { status: 400 }
    );
  }

  try {
    return await getDbConnection(async (manager) => {
      const courtIds = Array.from(new Set(selections.map((s) => s.courtId)));
      console.log("Requested courtIds (should match slot_time court_id):", courtIds);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Court ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö price
      const courts = await manager.find(Court, {
        where: { id: In(courtIds) },
        select: ["id", "price"],
      });

      console.log(
        "Fetched courts for price:",
        courts.map((c) => ({
          id: c.id,
          price: c.price,
        }))
      );

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏à‡∏≠ Court ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å courtId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const foundCourtIds = new Set(courts.map((c) => c.id));
      const missingCourtIds = courtIds.filter((id) => !foundCourtIds.has(id));
      if (missingCourtIds.length > 0) {
        return NextResponse.json(
          {
            success: false,
            message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Court ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö courtIds: ${missingCourtIds.join(", ")}`,
          },
          { status: 404 }
        );
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• slot_time ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö courtIds ‡πÅ‡∏•‡∏∞ bookingDate
      const slotTimes = await manager
        .createQueryBuilder(SlotTime, "slot")
        .where("slot.court_id IN (:...courtIds)", { courtIds })
        .andWhere("slot.booking_date = :date", { date: date.toISOString().split("T")[0] })
        .andWhere("slot.status_id != :statusId", { statusId: 2 }) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ slot ‡∏ß‡πà‡∏≤‡∏á
        .orderBy("slot.court_id", "ASC")
        .addOrderBy("slot.start_time", "ASC")
        .getMany();

      console.log(
        "Fetched slotTimes:",
        slotTimes.map((s) => ({
          slot_time_id: s.slot_time_id,
          court_id: s.court_id,
          booking_date: s.booking_date,
          start_time: s.start_time,
          end_time: s.end_time,
          status_id: s.status_id,
        }))
      );

      if (slotTimes.length === 0) {
        return NextResponse.json(
          {
            success: false,
            message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö courtIds: ${courtIds.join(", ")} ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${bookingDate}`,
          },
          { status: 404 }
        );
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ courtIds ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏µ‡πÉ‡∏ô slotTimes
      const foundSlotCourtIds = new Set(slotTimes.map((s) => s.court_id));
      const missingSlotCourtIds = courtIds.filter((id) => !foundSlotCourtIds.has(id));
      if (missingSlotCourtIds.length > 0) {
        return NextResponse.json(
          {
            success: false,
            message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô slot_time ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö courtIds: ${missingSlotCourtIds.join(", ")} ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${bookingDate}`,
          },
          { status: 404 }
        );
      }

      // Group slotTimes by court_id
      const slotTimeMap = new Map<number, SlotTime[]>();
      for (const slot of slotTimes) {
        const arr = slotTimeMap.get(slot.court_id) ?? [];
        arr.push(slot);
        slotTimeMap.set(slot.court_id, arr);
      }

      const bookings = [];
      for (const sel of selections) {
        if (sel.slots.length === 0) {
          continue;
        }

        const courtSlots = slotTimeMap.get(sel.courtId) || [];
        if (courtSlots.length === 0) {
          return NextResponse.json(
            {
              success: false,
              message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö courtId ${sel.courtId} ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${bookingDate}`,
            },
            { status: 404 }
          );
        }

        for (const idx of sel.slots) {
          const slot = courtSlots[idx];
          if (!slot) {
            return NextResponse.json(
              {
                success: false,
                message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà index ${idx} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö courtId ${sel.courtId} (‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${courtSlots.length} ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)`,
              },
              { status: 400 }
            );
          }

          // ‡∏î‡∏∂‡∏á price ‡∏à‡∏≤‡∏Å Court
          const court = courts.find((c) => c.id === slot.court_id);
          const price = court ? parseFloat(court.price || "0") : 0;
          if (isNaN(price)) {
            return NextResponse.json(
              {
                success: false,
                message: `‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö courtId ${sel.courtId}`,
              },
              { status: 400 }
            );
          }

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡πÉ‡∏ô bookings
          const existingBooking = await manager.findOne(BookingEntity, {
            where: {
              court_id: slot.court_id,
              booking_date: date.toISOString().split("T")[0],
              start_time: slot.start_time,
            },
          });

          if (existingBooking) {
            return NextResponse.json(
              {
                success: false,
                message: `‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${slot.start_time}-${slot.end_time} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö courtId ${sel.courtId} ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß`,
              },
              { status: 400 }
            );
          }

          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
          const booking = manager.create(BookingEntity, {
            user_id: userId,
            court_id: slot.court_id,
            start_time: slot.start_time,
            end_time: slot.end_time,
            booking_date: date.toISOString().split("T")[0],
            total_price: price, // ‡πÉ‡∏ä‡πâ price ‡∏à‡∏≤‡∏Å Court
            status_id: 2,
          });

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï slot_time
          const updateResult = await manager.update(
            SlotTime,
            {
              slot_time_id: slot.slot_time_id,
            },
            {
              status_id: 2,
            }
          );

          if (updateResult.affected === 0) {
            return NextResponse.json(
              {
                success: false,
                message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï slot_time ${slot.slot_time_id} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö court_id ${slot.court_id}, booking_date ${bookingDate}`,
              },
              { status: 500 }
            );
          }

          bookings.push(booking);
        }
      }

      if (bookings.length === 0) {
        return NextResponse.json(
          { success: false, message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" },
          { status: 400 }
        );
      }

      await manager.save(bookings);

      return NextResponse.json({ success: true, message: "‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    });
  } catch (err: any) {
    console.error("‚ùå bookMultipleCourts error:", err);
    return NextResponse.json(
      {
        success: false,
        message: err?.message || "Internal Server Error",
      },
      { status: 500 }
    );
  }
}